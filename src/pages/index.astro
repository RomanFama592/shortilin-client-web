---
export const prerender = true;

import Head from "../layouts/head.astro";
import Header from "../components/header.astro";
import HeaderInfo from "../components/HeaderInfo.astro";
---

<!DOCTYPE html>
  <Head />
  <body >
    <main>
    <Header />
    <HeaderInfo />
    <div class="contenedor text-white w-full">
      <section class="flex gap-4 justify-center items-center">
        <button id="buttonGetUrl" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Submit</button>
        <input class="border border-gray-300 bg-transparent rounded-lg py-2 px-4 focus:outline-none focus:border-indigo-500" id="urlInput" type="text" placeholder="URL to shorting">
        <div class="contenedor" id="contenedorUrl">
          <a class="button-base" id="toUrl" href="/"></a>
          <button class="button-base" id="copyUrl">
            <svg 
              style="height: 20px; width: 20px;"
              viewBox="0 0 1024 1024" 
              xmlns="http://www.w3.org/2000/svg">
              <path fill="currentColor" d="M768 832a128 128 0 0 1-128 128H192A128 128 0 0 1 64 832V384a128 128 0 0 1 128-128v64a64 64 0 0 0-64 64v448a64 64 0 0 0 64 64h448a64 64 0 0 0 64-64h64z"/>
              <path fill="currentColor" d="M384 128a64 64 0 0 0-64 64v448a64 64 0 0 0 64 64h448a64 64 0 0 0 64-64V192a64 64 0 0 0-64-64H384zm0-64h448a128 128 0 0 1 128 128v448a128 128 0 0 1-128 128H384a128 128 0 0 1-128-128V192A128 128 0 0 1 384 64z"/>
            </svg>
            <span class="tooltip"></span>
          </button>
        </div>
   
      </section>
      
      <div id="conteinerLoader" class="loader">
        <div class="justify-content-center jimu-primary-loading"></div>
      </div>
    </div>
  </main>
  </body>
</html>

<script> 

  localStorage.clear()

  import { q } from "../../public/query-selector";
  const $url = q.$("#urlInput");
  const $toUrl = q.$("#toUrl");
  const $contenedorUrl = q.$("#contenedorUrl");
  const $conteinerLoader = q.$("#conteinerLoader");

  // function updateSizeInput(){
  //   $url.style.width = (($url.value.length + 1) * 4) + 'px';
  // }

  document.addEventListener('DOMContentLoaded', () => {
    console.log($url.value);
    // if () {
    //   q.$("#buttonGetUrl").disabled = false;
    //         } else {
    //           q.$("#buttonGetUrl").disabled = true;
    //         }
          
  }
  )


  function callTooltip(msg: string, tooltipElement, color?: string){
    let colorO = tooltipElement.style.color
    tooltipElement.innerHTML = msg
    color ? tooltipElement.style.color = color : null
    tooltipElement.style.visibility = "visible"
    setTimeout(()=>{
      tooltipElement.classList.add("devanish")
      setTimeout(()=>{
        tooltipElement.style.visibility = "hidden"
        tooltipElement.classList.remove("devanish")
        color ? tooltipElement.style.color = colorO : null
      }, 500)
    }, 1000)
  }
  
  function changetoUrl(obj?: object){
    const defaultValues = {
      text: "",
      url: "",
      error: false,
      visibility: "hidden",
      ...obj,
    }

    $toUrl.innerHTML = defaultValues.text;
    $toUrl.href = "/" + defaultValues.url;
    
    $contenedorUrl.style.visibility = defaultValues.visibility
    
    if(defaultValues.visibility === "hidden"){
      $conteinerLoader.style.visibility = "visible"
    } else{
      $conteinerLoader.style.visibility = "hidden"
    }

    if(defaultValues.error){
      $toUrl.classList.add("error")
    } else{
      $toUrl.classList.remove("error")
    }
    
    if(defaultValues.url){
      $toUrl.title = window.location.href + defaultValues.url
    } else{
      $toUrl.title = ""
    }
    
  }

  async function getUrl() {


    


    let response;
    changetoUrl()
    
    try {
      response = await fetch(`${import.meta.env.PUBLIC_URL_API}/parser-url`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ url: $url.value }),
      });
      
      response = await response.json();
    } catch (err) {
      return changetoUrl({text: "ERROR: SERVER", error: true, visibility: "visible"})
    }
    
    if (response.error) {
      return changetoUrl({text: `ERROR: ${response.error}`, error: true, visibility: "visible"});
    }
    
    return changetoUrl({text: window.location.origin + "/" + response.id, url: response.id, visibility: "visible"} )
  }

  // updateSizeInput()
  // $url.addEventListener("input", updateSizeInput)
  q.$("#buttonGetUrl").addEventListener("click", getUrl);
  q.$("#copyUrl").addEventListener("click", ()=>{
    const $tooltip = q.$(".tooltip", q.$("#copyUrl"))
      if(navigator.clipboard && $toUrl.title !== ""){
        navigator.clipboard.writeText($toUrl.title)
        callTooltip("copy to clipboard", $tooltip)
      } else{
        callTooltip("error when trying to copy in clipboard", $tooltip, "var(--E-error-color)")
      }
  });
</script>

<style>

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

 

  body {
    background-color: #090B11;
    padding: 1.5rem;
    width: 100%;
  }

  main {
    width: 90%;
    max-width: 1024px;
    margin: 0 auto;
  }
</style>
